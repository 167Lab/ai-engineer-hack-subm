import React, { useState } from 'react';
import { Card, Steps, Button, message, Form, Select, Input, Upload, Radio, Space, Alert, Progress } from 'antd';
import { UploadOutlined, FolderOpenOutlined } from '@ant-design/icons';
import { useMutation } from '@tanstack/react-query';
import { analyzeDataSource } from '../services/api';
import { SourceType, TargetType, AnalysisResult, MASAnalysisResult } from '../types';
import AnalysisDisplay from './AnalysisDisplay';
import StorageSelector from './StorageSelector';
import PipelineConfig, { PipelineConfigData } from './PipelineConfig';
import DAGPreview from './DAGPreview';
import { LargeFileUploader, MemorySafeFileReader } from '../utils/fileUploadUtils';

const { Step } = Steps;
const { Option } = Select;

const sourceTypes = Object.values(SourceType);

const Step1Form = ({ 
    uploadProgress, 
    uploadedFile, 
    setUploadedFile, 
    setUploadProgress,
    setAnalysisResult,
    setSourceConfig
}: { 
    uploadProgress: any; 
    uploadedFile: any;
    setUploadedFile: any;
    setUploadProgress: any;
    setAnalysisResult: any;
    setSourceConfig: any;
}) => {
    const form = Form.useFormInstance();
    const sourceType = Form.useWatch('source_type', form);
    const fileInputType = Form.useWatch('file_input_type', form) || 'path';

    const handleFileUpload = async (file: any) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (—É–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç –¥–æ 1 –ì–ë)
        const maxSize = 1024 * 1024 * 1024; // 1 –ì–ë
        if (file.size > maxSize) {
            message.error(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 1 –ì–ë. –†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: ${(file.size / 1024 / 1024 / 1024).toFixed(1)} –ì–ë`);
            return false;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å chunked upload
        const useChunkedUpload = LargeFileUploader.shouldUseChunkedUpload(file.size);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        let detectedType = sourceType;
        try {
            const detection = await MemorySafeFileReader.detectFileType(file);
            if (detection.confidence > 0.7) {
                detectedType = detection.type as SourceType;
                console.log(`üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Ñ–∞–π–ª–∞: ${detectedType} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${detection.confidence})`);
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞:', error);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        setUploadedFile({
            file: file,
            name: file.name,
            size: file.size,
            useChunkedUpload: useChunkedUpload,
            detectedType: detectedType,
            isUploading: false,
            uploadCompleted: false,
            analysisResult: null
        });

        // *** –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–†–ê–ó–£ –ù–ê–ß–ò–ù–ê–ï–ú –ó–ê–ì–†–£–ó–ö–£ –ù–ê –°–ï–†–í–ï–† ***
        if (useChunkedUpload) {
            // –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º chunked upload
            message.info(`üì§ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ (${(file.size / 1024 / 1024).toFixed(1)} –ú–ë) –Ω–∞ —Å–µ—Ä–≤–µ—Ä...`);
            await startImmediateUpload(file, detectedType);
        } else {
            // –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º streaming upload  
            message.info(`üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª (${(file.size / 1024).toFixed(1)} –ö–ë) –Ω–∞ —Å–µ—Ä–≤–µ—Ä...`);
            await startImmediateUpload(file, detectedType);
        }

        return false; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É Antd
    };

    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const startImmediateUpload = async (file: any, detectedType: string) => {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            setUploadedFile((prev: any) => prev ? {...prev, isUploading: true} : null);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            setUploadProgress({
                visible: true,
                percentage: 0,
                currentChunk: 0,
                totalChunks: 0,
                status: 'uploading',
                message: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ...'
            });

            let result;
            const useChunkedUpload = LargeFileUploader.shouldUseChunkedUpload(file.size);
            
            if (useChunkedUpload) {
                // Chunked upload –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                result = await LargeFileUploader.uploadLargeFileForAnalysis(
                    file,
                    detectedType,
                    (progress) => {
                        setUploadProgress((prev: any) => ({
                            ...prev,
                            percentage: progress.percentage,
                            currentChunk: progress.currentChunk,
                            totalChunks: progress.totalChunks,
                            message: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${(progress.loaded / 1024 / 1024).toFixed(1)} –ú–ë –∏–∑ ${(progress.total / 1024 / 1024).toFixed(1)} –ú–ë`
                        }));
                    }
                );
            } else {
                // Streaming upload –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
                const formData = new FormData();
                formData.append('file', file);
                formData.append('source_type', detectedType);
                formData.append('sample_size', '1000');
                
                const response = await fetch('/api/v1/analyze_file_stream', {
                    method: 'POST',
                    body: formData,
                });
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(`Upload failed: ${errorData.error}`);
                }
                
                result = await response.json();
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            const analysisResult = processAnalysisResult(result);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            setUploadedFile((prev: any) => prev ? {
                ...prev, 
                isUploading: false,
                uploadCompleted: true,
                analysisResult: analysisResult
            } : null);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setAnalysisResult(analysisResult);
            setSourceConfig({
                source_type: detectedType,
                connection_params: {
                    file_name: file.name,
                    is_uploaded: true,
                    server_processed: true
                }
            });
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            setUploadProgress((prev: any) => ({
                ...prev,
                status: 'complete',
                percentage: 100,
                message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!'
            }));

            // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                setUploadProgress((prev: any) => ({ ...prev, visible: false }));
            }, 3000);

            message.success(`‚úÖ –§–∞–π–ª "${file.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!`);

        } catch (error: any) {
            console.error('–û—à–∏–±–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:', error);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            setUploadedFile((prev: any) => prev ? {
                ...prev, 
                isUploading: false,
                uploadCompleted: false,
                analysisResult: null
            } : null);
            
            setUploadProgress((prev: any) => ({
                ...prev,
                status: 'error',
                message: error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞'
            }));

            message.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const processAnalysisResult = (result: any): AnalysisResult => {
        const streamingResult = result.analysis_result || result;
        
        return {
            row_count: streamingResult?.total_rows || 0,
            column_count: streamingResult?.columns?.length || 0,
            columns: streamingResult?.column_types || {},
            data_quality: {
                total_nulls: streamingResult?.null_counts ? 
                    Object.values(streamingResult.null_counts as Record<string, number>)
                        .reduce((a: number, b: number) => a + b, 0) : 0,
                duplicate_rows: 0,
                completeness_score: streamingResult?.data_quality_score || 100,
                quality_score: streamingResult?.data_quality_score || 100,
                null_counts: streamingResult?.null_counts || {},
                issues: []
            },
            recommendations: [{
                type: 'server_processed',
                description: `–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –†–∞–∑–º–µ—Ä: ${result.file_info?.size || 0} bytes`,
                confidence: 1.0
            }],
            llm_recommendations: [`–§–∞–π–ª "${result.file_info?.name || 'unknown'}" —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.`],
            error: undefined,
            raw_response: result,
            streaming_info: {
                file_size: result.file_info?.size,
                processed_size: result.file_info?.processed_size,
                sample_size: result.file_info?.sample_size,
                analysis_method: result.file_info?.analysis_method || 'server_processed'
            }
        };
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    const cancelUpload = () => {
        setUploadedFile((prev: any) => prev ? {
            ...prev, 
            isUploading: false,
            uploadCompleted: false,
            analysisResult: null
        } : null);
        
        setUploadProgress((prev: any) => ({
            ...prev,
            visible: false,
            status: 'uploading',
            percentage: 0
        }));
        
        message.info('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
    };

    const renderConnectionParams = () => {
        switch (sourceType) {
            case SourceType.CSV:
            case SourceType.JSON:
            case SourceType.XML:
                return (
                    <Space direction="vertical" style={{ width: '100%' }}>
                        <Form.Item
                            name="file_input_type"
                            label="–°–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è —Ñ–∞–π–ª–∞"
                        >
                            <Radio.Group>
                                <Radio value="path">
                                    <FolderOpenOutlined /> –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                                </Radio>
                                <Radio value="upload">
                                    <UploadOutlined /> –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                                </Radio>
                            </Radio.Group>
                        </Form.Item>

                        {fileInputType === 'path' ? (
                            <Form.Item
                                name="file_path"
                                label="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
                                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É!' }]}
                                help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–Ω—É—Ç—Ä–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /opt/airflow/data/test_frontend.csv)"
                            >
                                <Input placeholder="/opt/airflow/data/test_frontend.csv" />
                            </Form.Item>
                        ) : (
                            <Form.Item
                                name="uploaded_file"
                                label="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª"
                                rules={[{ 
                                    required: true, 
                                    validator: () => {
                                        if (!uploadedFile) {
                                            return Promise.reject(new Error('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!'));
                                        }
                                        return Promise.resolve();
                                    }
                                }]}
                            >
                                <Upload
                                    beforeUpload={handleFileUpload}
                                    maxCount={1}
                                    accept={sourceType === SourceType.CSV ? '.csv' : 
                                           sourceType === SourceType.JSON ? '.json' : 
                                           sourceType === SourceType.XML ? '.xml' : ''}
                                    showUploadList={{ 
                                        showRemoveIcon: true,
                                        showPreviewIcon: false 
                                    }}
                                    onRemove={() => {
                                        setUploadedFile(null);
                                        form.setFieldsValue({ file_path: '', uploaded_file_content: '' });
                                    }}
                                    className="upload-dragger"
                                    style={{ width: '100%' }}
                                >
                                    <Button icon={<UploadOutlined />}>
                                        –í—ã–±—Ä–∞—Ç—å {sourceType === SourceType.CSV ? 'CSV' : 
                                                 sourceType === SourceType.JSON ? 'JSON' : 
                                                 sourceType === SourceType.XML ? 'XML' : sourceType.toUpperCase()} —Ñ–∞–π–ª
                                    </Button>
                                </Upload>
                                {uploadedFile && (
                                    <div style={{ marginTop: 8 }}>
                                        <Alert
                                            message={
                                                uploadedFile.isUploading ? 
                                                `üì§ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: ${uploadedFile.name}` :
                                                uploadedFile.uploadCompleted ? 
                                                `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${uploadedFile.name}` :
                                                `‚è≥ –í—ã–±—Ä–∞–Ω: ${uploadedFile.name}`
                                            }
                                            description={`–†–∞–∑–º–µ—Ä: ${uploadedFile.size > 1024 * 1024 ? 
                                                (uploadedFile.size / 1024 / 1024).toFixed(1) + ' –ú–ë' : 
                                                (uploadedFile.size / 1024).toFixed(1) + ' –ö–ë'} | –¢–∏–ø: ${sourceType.toUpperCase()}${uploadedFile.useChunkedUpload ? ' | Chunked –∑–∞–≥—Ä—É–∑–∫–∞ üöÄ' : ''}${
                                                uploadedFile.uploadCompleted ? ' | –ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É!' : 
                                                uploadedFile.isUploading ? ' | –ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞...' : ' | –û–∂–∏–¥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏'
                                            }`}
                                            type={
                                                uploadedFile.uploadCompleted ? "success" :
                                                uploadedFile.isUploading ? "info" : "warning"
                                            }
                                            showIcon
                                            closable={false}
                                            action={
                                                uploadedFile.isUploading ? (
                                                    <Button 
                                                        size="small" 
                                                        danger 
                                                        onClick={() => cancelUpload()}
                                                    >
                                                        –û—Ç–º–µ–Ω–∏—Ç—å
                                                    </Button>
                                                ) : undefined
                                            }
                                        />
                                    </div>
                                )}
                                
                                {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ */}
                                {uploadProgress.visible && (
                                    <div style={{ marginTop: 12, padding: '12px', backgroundColor: '#f6ffed', borderRadius: '6px', border: '1px solid #b7eb8f' }}>
                                        <div style={{ marginBottom: '8px', fontWeight: 'bold', color: '#52c41a' }}>
                                            {uploadProgress.status === 'uploading' && 'üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –ø–æ —á–∞—Å—Ç—è–º...'}
                                            {uploadProgress.status === 'processing' && '‚öôÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...'}
                                            {uploadProgress.status === 'complete' && '‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!'}
                                            {uploadProgress.status === 'error' && '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'}
                                        </div>
                                        
                                        <Progress 
                                            percent={uploadProgress.percentage} 
                                            status={uploadProgress.status === 'error' ? 'exception' : 'active'}
                                            strokeColor={{
                                                '0%': '#87d068',
                                                '100%': '#52c41a',
                                            }}
                                            format={(percent) => `${percent}%`}
                                        />
                                        
                                        {uploadProgress.totalChunks > 1 && (
                                            <div style={{ fontSize: '12px', color: '#666', marginTop: '4px' }}>
                                                –ß–∞–Ω–∫ {uploadProgress.currentChunk} –∏–∑ {uploadProgress.totalChunks}
                                            </div>
                                        )}
                                        
                                        {uploadProgress.message && (
                                            <div style={{ fontSize: '12px', color: '#666', marginTop: '4px' }}>
                                                {uploadProgress.message}
                                            </div>
                                        )}
                                    </div>
                                )}
                            </Form.Item>
                        )}
                        
                        {/* –°–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ */}
                        <Form.Item name="uploaded_file_content" hidden>
                            <Input type="hidden" />
                        </Form.Item>
                    </Space>
                );
            case SourceType.POSTGRES:
            case SourceType.CLICKHOUSE:
                return (
                    <Form.Item
                        name="table"
                        label="–ò–º—è —Ç–∞–±–ª–∏—Ü—ã"
                        rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã!' }]}
                    >
                        <Input placeholder="public.my_table" />
                    </Form.Item>
                );
            default:
                return (
                    <Form.Item label="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è">
                        <Input.TextArea
                            rows={4}
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è"
                            disabled
                        />
                    </Form.Item>
                );
        }
    };

    return (
        <>
            <Form.Item
                name="source_type"
                label="–¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞"
                rules={[{ required: true, message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞!' }]}
            >
                <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞">
                    {sourceTypes.map(type => (
                        <Option key={type} value={type}>{type.toUpperCase()}</Option>
                    ))}
                </Select>
            </Form.Item>
            {renderConnectionParams()}
        </>
    );
};

const DataSourceWizard: React.FC = () => {
    const [current, setCurrent] = useState(0);
    const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);
    const [selectedStorage, setSelectedStorage] = useState<TargetType | undefined>(undefined);
    const [pipelineConfig, setPipelineConfig] = useState<PipelineConfigData | undefined>(undefined);
    const [sourceConfig, setSourceConfig] = useState<any>(null);
    const [form] = Form.useForm();
    const [uploadProgress, setUploadProgress] = useState<{
        visible: boolean;
        percentage: number;
        currentChunk: number;
        totalChunks: number;
        status: 'uploading' | 'processing' | 'complete' | 'error';
        message: string;
    }>({
        visible: false,
        percentage: 0,
        currentChunk: 0,
        totalChunks: 0,
        status: 'uploading',
        message: ''
    });
    const [uploadedFile, setUploadedFile] = useState<any>(null);

    const analysisMutation = useMutation<MASAnalysisResult, Error, any>({
        mutationFn: analyzeDataSource,
        onSuccess: (data) => {
            message.success('–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º MAS —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            const processedResult: AnalysisResult = {
                row_count: data.analysis_result?.metadata?.row_count || 0,
                column_count: data.analysis_result?.metadata?.column_count || 0,
                columns: data.analysis_result?.metadata?.columns || {},
                data_quality: data.analysis_result?.data_quality,
                recommendations: data.analysis_result?.recommendations || [],
                llm_recommendations: data.analysis_result?.llm_recommendations,
                error: data.error,
                raw_response: data
            };
            setAnalysisResult(processedResult);
            setCurrent(current + 1);
        },
        onError: (error: Error) => {
            message.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: ${error.message}`);
        },
    });

    // –°—Ç–∞—Ä–∞—è streamingAnalysisMutation —É–¥–∞–ª–µ–Ω–∞ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞

    const handleNext = () => {
        if (current === 0) {
            form.submit();
        } else if (canGoToNextStep()) {
            setCurrent(current + 1);
        } else {
            message.warning('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —à–∞–≥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É');
        }
    };

    const handlePrev = () => {
        setCurrent(current - 1);
    };

    const onFormFinish = async (values: any) => {
        const { source_type, file_path, table, file_input_type } = values;

        // *** –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ***
        if (file_input_type === 'upload' && uploadedFile && uploadedFile.uploadCompleted && uploadedFile.analysisResult) {
            console.log('‚úÖ –§–∞–π–ª —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
            
            // –§–∞–π–ª —É–∂–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            setAnalysisResult(uploadedFile.analysisResult);
            setSourceConfig({
                source_type,
                connection_params: {
                    file_name: uploadedFile.name,
                    is_uploaded: true,
                    server_processed: true
                }
            });
            
            message.success('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–Ω–∞–ª–∏–∑—É —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞');
            setCurrent(current + 1);
            return;
        }

        // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥
        if (file_input_type === 'upload' && uploadedFile && uploadedFile.isUploading) {
            message.warning('‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
            return;
        }

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –Ω–æ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        if (file_input_type === 'upload' && uploadedFile && !uploadedFile.uploadCompleted) {
            message.warning('‚è≥ –§–∞–π–ª –≤—ã–±—Ä–∞–Ω –Ω–æ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —Å–Ω–æ–≤–∞.');
            return;
        }

        let connection_params = {};

        switch (source_type) {
            case SourceType.CSV:
            case SourceType.JSON:
            case SourceType.XML:
                if (file_input_type === 'upload') {
                    // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ uploadedFile,
                    // —Ñ–∞–π–ª —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–º –≤ —à–∞–≥–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                    if (!uploadedFile || !uploadedFile.uploadCompleted) {
                        message.warning('‚è≥ –§–∞–π–ª –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏.');
                        return;
                    }
                    connection_params = {
                        file_name: uploadedFile.name,
                        is_uploaded: true,
                        server_processed: true
                    };
                } else {
                    // –î–ª—è —Ñ–∞–π–ª–∞, —É–∂–µ –ª–µ–∂–∞—â–µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å
                    connection_params = { 
                        file_path,
                        is_uploaded: false 
                    };
                }
                break;
            case SourceType.POSTGRES:
            case SourceType.CLICKHOUSE:
                connection_params = { table };
                break;
        }

        const payload = {
            source_type,
            connection_params,
        };
        
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑:', payload);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        setSourceConfig(payload);
        analysisMutation.mutate(payload);
    };

    const handleStorageSelect = (storage: TargetType) => {
        setSelectedStorage(storage);
    };

    const handlePipelineConfigChange = (config: PipelineConfigData) => {
        setPipelineConfig(config);
    };

    const canGoToNextStep = () => {
        switch (current) {
            case 0: {
                // –î–ª—è —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                const formValues = form.getFieldsValue();
                const fileInputType = formValues.file_input_type || 'path';
                
                if (fileInputType === 'upload') {
                    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    if (!uploadedFile) return false;
                    if (uploadedFile.isUploading) return false; // –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
                    if (!uploadedFile.uploadCompleted) return false; // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                    return true; // –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
                } else {
                    // –î–ª—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ - —Ñ–æ—Ä–º–∞ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    return true;
                }
            }
            case 1: return !!analysisResult; // –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            case 2: return !!selectedStorage; // –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            case 3: return !!pipelineConfig; // –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
            case 4: return true; // —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥
            default: return false;
        }
    };

    const steps = [
        {
            title: '–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö',
            content: <Step1Form 
                uploadProgress={uploadProgress} 
                uploadedFile={uploadedFile}
                setUploadedFile={setUploadedFile}
                setUploadProgress={setUploadProgress}
                setAnalysisResult={setAnalysisResult}
                setSourceConfig={setSourceConfig}
            />,
        },
        {
            title: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö',
            content: (
                <div style={{ maxHeight: '500px', overflowY: 'auto', paddingRight: '16px' }}>
                    {analysisMutation.isPending ? <p>–ò–¥–µ—Ç –∞–Ω–∞–ª–∏–∑...</p> : <AnalysisDisplay analysisResult={analysisResult} />}
                </div>
            ),
        },
        {
            title: '–í—ã–±–æ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞',
            content: analysisResult ? (
                <StorageSelector 
                    recommendations={analysisResult.recommendations}
                    selectedStorage={selectedStorage}
                    onStorageSelect={handleStorageSelect}
                />
            ) : (
                <p>–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö</p>
            ),
        },
        {
            title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞',
            content: selectedStorage ? (
                <PipelineConfig 
                    selectedStorage={selectedStorage}
                    onConfigChange={handlePipelineConfigChange}
                />
            ) : (
                <p>–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ</p>
            ),
        },
        {
            title: '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∑–∞–ø—É—Å–∫',
            content: (sourceConfig && selectedStorage && pipelineConfig) ? (
                <DAGPreview 
                    sourceConfig={sourceConfig}
                    selectedStorage={selectedStorage}
                    pipelineConfig={pipelineConfig}
                    analysisResult={analysisResult}
                />
            ) : (
                <p>–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —à–∞–≥–∏</p>
            ),
        },
    ];

    return (
        <Card title="–ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞">
            <Steps current={current}>
                {steps.map(item => (
                    <Step key={item.title} title={item.title} />
                ))}
            </Steps>
            <div className="steps-content" style={{ marginTop: 24, minHeight: 200, padding: 24, background: '#fafafa' }}>
                <Form form={form} onFinish={onFormFinish} layout="vertical" style={{ display: current === 0 ? 'block' : 'none' }}>
                   {steps[0].content}
                </Form>
                {current !== 0 && steps[current].content}
            </div>
            <div className="steps-action" style={{ marginTop: 24 }}>
                {current > 0 && (
                    <Button style={{ margin: '0 8px' }} onClick={handlePrev}>
                        –ù–∞–∑–∞–¥
                    </Button>
                )}
                {current < steps.length - 1 && (
                    <Button 
                        type="primary" 
                        onClick={handleNext} 
                        loading={
                            analysisMutation.isPending || 
                            (current === 0 && uploadedFile && uploadedFile.isUploading)
                        }
                        disabled={!canGoToNextStep()}
                    >
                        {current === 0 && uploadedFile && uploadedFile.isUploading ? '–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ñ–∞–π–ª...' : '–î–∞–ª–µ–µ'}
                    </Button>
                )}
            </div>
        </Card>
    );
};

export default DataSourceWizard;
